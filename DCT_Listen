using System;
using System.Linq;
using System.Collections;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;
using System.Collections.Generic;

using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.Enums;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
    public class DCT_Listen : Robot
    {

        [Parameter("Label ID", DefaultValue = "DCT")]
        public string LabelPrefix { get; set; }

        [Parameter("Trading TimeFrame", DefaultValue = "Hour")]
        public TimeFrame tf { get; set; }

        [Parameter("Swing Periods", DefaultValue = 10, Step = 1)]
        public int SwingPeriods { get; set; }

        [Parameter("Vol Periods", DefaultValue = 20, Step = 1)]
        public int VolPeriods { get; set; }

        [Parameter("Risk Max (%)", DefaultValue = 1, Step = 0.05)]
        public double Risk_Max { get; set; }

        [Parameter("Risk Min (%)", DefaultValue = 0.25, Step = 0.05)]
        public double Risk_Min { get; set; }

        [Parameter("R-r Ratio", DefaultValue = 1, Step = 0.05)]
        public double RrRatio { get; set; }

        [Parameter("ATR Multiple", DefaultValue = 2, Step = 0.5)]
        public double Factor { get; set; }

        [Parameter("Risk Cover (%)", DefaultValue = 50, Step = 5)]
        public double Risk_Cover { get; set; }

        [Parameter("Debug Mode", DefaultValue = true)]
        public bool DebugMode { get; set; }

        [Parameter("Token", DefaultValue = "1258254617:AAHgJTpoWsV7VEuunmp3DF8yGYX3hhgxbEA", Group = "Telegram")]
        public string Token { get; set; }

        [Parameter("Chat ID", DefaultValue = "-374452996", Group = "Telegram")]
        public string ChatId { get; set; }

        public Telegram Telegram { get; private set; }

        public DateTime StartUpDate { get; set; }

        public string NewSignal { get; set; }

        public bool UseTrailingStop = false;

        double StopLoss_Px, StopLoss_Pips;
        double BadVolumeSize = 10000;

        string _asset, _label;
        TradeType _direction;
        Symbol _symbol;
        string _comment;
        double _volume;

        ArrayList Balances;
        double EquityPeak, EquityTrough;
        double Profits, Losses, avgProfit, avgLoss;
        int countWin, countLoss;

        Dictionary<string, double> dictEaR;

        protected override void OnStart()
        {
            StartUpDate = DateTime.UtcNow;

            Telegram = new Telegram(Token, ChatId);
            Telegram.Bot.OnMessage += OnMessageReceived;
            Telegram.Bot.StartReceiving(Array.Empty<UpdateType>());
            Print("Bot started!");
            Balances = new ArrayList();
            //CalcStats();
            dictEaR = new Dictionary<string, double>();

        }

        protected override void OnBar()
        {
            if (Positions.FindAll(LabelPrefix).Count() > 0)
                CalcStats();
        }

        protected override void OnStop()
        {
            Telegram.Bot.OnMessage -= OnMessageReceived;
            Print("Bot stopped!");
        }

        public void OnMessageReceived(object sender, MessageEventArgs e)
        {
            // If it's somehow null, message type isn't text and it's not the channel you wanted, dismiss the message.
            Print(e.Message.Text);

            if (e == null || e.Message.Type != MessageType.Text || e.Message.Chat.Id != Telegram.ChatId)
                return;

            if (e.Message.From.Username != "punitbharadwa")
                return;

            // If the message is sent before startup, dismiss it.
            if (e.Message.Date < StartUpDate)
                return;

            NewSignal = e.Message.Text;

            Print(NewSignal);
            var Signal = NewSignal.Split(' ');
            //for (var i = 0; i <= Signal.GetUpperBound(0); i++)
            //    Print("Signal {0}: {1}", i, Signal[i]);

            //Print("Signal Count: " + Signal.GetUpperBound(0));
            if (Signal.GetUpperBound(0) < 6)
                return;


            _asset = Signal[0];
            _symbol = Symbols.GetSymbol(_asset);

            if (Signal.Last().ToUpper() == "UP")
            {
                _direction = TradeType.Buy;
            }
            else if (Signal.Last().ToUpper() == "DN")
            {
                _direction = TradeType.Sell;
            }

            _label = string.Format("{0}", LabelPrefix);

            Bars b = MarketData.GetBars(tf, _symbol.Name);
            StopLoss_Px = StopLossPrice(b, _direction, SwingPeriods, Factor);
            StopLoss_Pips = Math.Round(Math.Abs(b.ClosePrices.Last(0) - StopLoss_Px) / _symbol.PipSize, 1);
            double SD = GetSD(_symbol, b.ClosePrices, VolPeriods, Factor);
            Print("StopLoss: {0}\tSwing: {1}\tSD: {2}", StopLoss_Pips, StopLoss_Px, SD);

            double Risk = Signal[3].ToUpper() == "HOUR" ? Risk_Min : EquityOsc(Risk_Max, Risk_Min, EquityPeak, EquityTrough, Account.Equity - 1000);
            double ordervolume = GetOrderVolume(StopLoss_Pips, Risk, TradeCounter(_label, _asset), _symbol);
            _volume = Signal[3].ToUpper() == "HOUR" ? _symbol.VolumeInUnitsMin * 3 : ordervolume;
            _comment = string.Format("{0}_{1}_{2}_{3}_{4}_{5}", TradeCounter(_label, _asset), _direction, Signal[3], Signal[0], Signal[6], _volume);
            ExecuteMarketOrder(_direction, _symbol.Name, _volume, _label, StopLoss_Pips, null, _comment, UseTrailingStop);
            Position p = LastResult.Position;
            Print("{5} == {4} {0}: SL:{1}, Risk:{2} Size:{3}", p.SymbolName, StopLoss_Pips, Risk, p.VolumeInUnits, p.TradeType, p.Id);
        }


        private double StopLossPrice(Bars b, TradeType dir, int Periods, double Factor)
        {
            SwingSD swing_sd = Indicators.GetIndicator<SwingSD>(b, Periods, false, 20, Factor, false);
            double lastswing = dir == TradeType.Buy ? swing_sd.Lows.Last(0) : swing_sd.Highs.Last(0);
            return lastswing;
        }

        private void CalcStats()
        {
            Profits = 0.0;
            Losses = 0.0;
            countWin = 0;
            countLoss = 0;
            EquityPeak = 0.0;
            EquityTrough = 0.0;
            double sumEq = 0.0;
            double prevBalance = 0;
            double sum_sd = 0.0;
            double sum_sortino_sd = 0.0;
            foreach (HistoricalTrade h in History.FindAll(LabelPrefix))
            {
                if (h.NetProfit > 0)
                {
                    Profits += h.NetProfit;
                    countWin++;
                }
                else if (h.NetProfit < 0)
                {
                    Losses += h.NetProfit;
                    countLoss++;
                }
                Balances.Add(prevBalance + h.NetProfit);
            }
            EquityPeak = (double)Balances.ToArray().Max();

            Print("equity calcs");
            if (Balances.Count > 20)
                for (var i = 1; i < 20; i++)
                    sumEq += (double)(Balances[Balances.Count - i]);

            double avgTotal = (avgProfit + avgLoss) / (countWin + countLoss);
            foreach (HistoricalTrade h in History.FindAll(LabelPrefix))
            {
                sum_sd += Math.Pow(h.NetProfit - avgTotal, 2.0);
                sum_sortino_sd += Math.Pow(Math.Max(h.NetProfit, 0) - avgTotal, 2.0);
            }

            double sd = Math.Sqrt(sum_sd / (countWin + countLoss));
            double sortino_sd = Math.Sqrt(sum_sortino_sd / (countWin + countLoss));
            double GE = (avgProfit * countWin + avgLoss * countLoss) / (countWin + countLoss);

            EquityTrough = sumEq / 20;
            avgProfit = Profits / countWin;
            avgLoss = Losses / countLoss;
            Print("Eq Peak: {0}", EquityPeak);
            Print("Eq Trough: {0}", EquityTrough);
            Print("Eq prev Bal: {0}", prevBalance);
            Print("Sum Profits: {0}\tLosses: {1}", Profits, Losses);
            Print("Counts Wins: {0}\tLosses: {1}\tWin Rate: {2:P2}", countWin, countLoss, countWin / (countWin + countLoss));
            Print("GE: {0}\tGPR: {1}", GE, Math.Abs(Profits / Losses));
            Print("Vol: {0}\t-ve Vol: {1}", sd, sortino_sd);
            Print("Sharpe: {0} Sortino: {1}", GE / sd, GE / sortino_sd);
            Print("Score: {0}", (GE / sd) * (Profits / Losses));
        }

        public double EquityOsc(double Risk_Max, double Risk_Min, double Peak, double Trough, double equity)
        {
            double Value = (equity - Trough) / (Peak - Trough);
            if (Value.ToString() == "NaN")
            {
                return Risk_Min;
            }
            else
            {
                return Math.Max(Risk_Min, Math.Min(Risk_Max, (Risk_Max * Value)));
            }
        }

        private int TradeCounter(string Label, string Asset)
        {
            var counter = Positions.FindAll(Label, Asset).Count();
            return counter;
        }

        private double GetOrCalcStopLoss(string label, double ATR_Stop)
        {
            var FinalStopLoss = 0.0;
            if (Positions.FindAll(label).Count() > 0)
            {
                Position pos = Positions.Find(label);
                if (pos.StopLoss.HasValue)
                {
                    var s = Symbols.GetSymbol(pos.SymbolName);
                    var CurrentPrice = MarketData.GetBars(TimeFrame.Minute, s.Name).ClosePrices.LastValue;
                    var StopLossPrice = pos.StopLoss.Value;
                    FinalStopLoss = CurrentPrice - StopLossPrice;
                    FinalStopLoss = Math.Abs(FinalStopLoss) / s.PipSize;
                }
            }
            else
            {
                FinalStopLoss = ATR_Stop;
            }

            return Math.Round(FinalStopLoss, 1);
        }

        private double GetSD(Symbol s, DataSeries d, int Periods, double Factor)
        {
            double sd = Indicators.StandardDeviation(d, Periods, MovingAverageType.Simple).Result.LastValue;
            return Math.Round(Factor * sd / s.PipSize, 1);
        }
        private double GetOrderVolume(double StopLoss, double Risk, int NoOfTrades, Symbol s)
        {
            double risk_tranche = Risk * Math.Pow(0.9, NoOfTrades);
            double _OrderVolume = ((Account.Balance * risk_tranche / 100) / StopLoss / s.PipValue);
            double FinalVolume = Math.Max(s.VolumeInUnitsMin * 3, Math.Min(BadVolumeSize, _OrderVolume));
            return s.NormalizeVolumeInUnits(FinalVolume);
        }

    }
}


